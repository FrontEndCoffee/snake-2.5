/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	const PERSPECTIVE_CONSTANT = 0.875;
	
	const shapes = __webpack_require__(1);
	const Vector = shapes.Vector;
	const Line = shapes.Line;
	const Polygon = shapes.Polygon;
	const Entity = shapes.Entity;
	
	const canvas = document.getElementById('canvas');
	const context = canvas.getContext('2d');
	
	const canvasSize = new Vector(canvas.clientWidth, canvas.clientHeight);
	
	const blockSize = new Vector(150, 200);
	
	const position = new Vector(0, 0);
	const blockShape = new Polygon([new Vector(64, 64), new Vector(64, -64), new Vector(-64, -64), new Vector(-64, 64)]);
	
	const blockEntity = new Entity(blockShape, position);
	blockEntity.position = new Vector(12, 23);
	
	// init
	context.translate(canvasSize.x / 2, canvasSize.y / 2);
	context.fillStyle = "rgba(255,255,255,0.9)";
	window.ctx = context;
	
	window.onmousemove = function (e) {
	
	  const mousePos = new Vector(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);
	
	  clearFrame();
	  drawCursor(mousePos);
	
	  blockEntity.position = mousePos;
	
	  // create shadow Entity
	  const line = new Line(blockEntity.position, new Vector(0, 0));
	
	  const blockShadowEntity = new Entity(blockEntity.verticies, blockEntity.position);
	
	  const frontpaneVertecies = blockEntity.getVerticies();
	  const backpaneVertecies = frontpaneVertecies.map(addPerspective);
	
	  // draw backpane dots (#777)
	  context.fillStyle = '#777';
	  backpaneVertecies.forEach(function (vertexVector) {
	    context.fillRect(vertexVector.x - 1, vertexVector.y - 1, 3, 3);
	  });
	
	  // draw backpane lines (#777)
	  context.strokeStyle = '#777';
	  backpaneVertecies.forEach(function (vertexVector, i, vertecies) {
	    const nextVertex = vertecies[(i + 1) % vertecies.length];
	    drawLine(vertexVector, nextVertex);
	  });
	
	  // draw middle lines (#bbb)
	  context.strokeStyle = '#bbb';
	  backpaneVertecies.forEach(function (vertexVector, i) {
	    const frontpaneVertex = frontpaneVertecies[i];
	    drawLine(vertexVector, frontpaneVertex);
	  });
	
	  // draw frontpane lines (#fff)
	  context.strokeStyle = '#fff';
	  frontpaneVertecies.forEach(function (vertexVector, i, vertecies) {
	    const nextVertex = vertecies[(i + 1) % vertecies.length];
	    drawLine(vertexVector, nextVertex);
	  });
	
	  // draw frontpane dots (#fff)
	  context.fillStyle = '#fff';
	  frontpaneVertecies.forEach(function (vertexVector) {
	    context.fillRect(vertexVector.x - 1, vertexVector.y - 1, 3, 3);
	  });
	};
	
	function clearFrame() {
	  context.clearRect(-canvasSize.x / 2, -canvasSize.y / 2, canvasSize.x, canvasSize.y);
	}
	
	function drawLine(vector1, vector2) {
	  context.beginPath();
	  context.moveTo(vector1.x, vector1.y);
	  context.lineTo(vector2.x, vector2.y);
	  context.stroke();
	}
	
	function addPerspective(vertexVector) {
	  return new Vector(vertexVector.x * PERSPECTIVE_CONSTANT, vertexVector.y * PERSPECTIVE_CONSTANT);
	}
	
	function drawCursor(mousePosVec) {
	  const oldStyle = context.fillStyle;
	  context.fillStyle = '#fff';
	  context.fillRect(mousePosVec.x - 5, mousePosVec.y - 1, 10, 2);
	  context.fillRect(mousePosVec.x - 1, mousePosVec.y - 5, 2, 10);
	  context.fillStyle = oldStyle;
	}

/***/ },
/* 1 */
/***/ function(module, exports) {

	'use strict';
	
	function Vector(x, y) {
	  this.x = x;
	  this.y = y;
	}
	Vector.prototype.add = function (vector) {
	  return new Vector(this.x + vector.x, this.y + vector.y);
	};
	
	function Line(v1, v2) {
	  this.v1 = v1;
	  this.v2 = v2;
	}
	Line.prototype.getDeltaX = function () {
	  return this.v2.x - this.v1.x;
	};
	Line.prototype.getDeltaY = function () {
	  return this.v2.y - this.v1.y;
	};
	Line.prototype.getLength = function () {
	  return Math.sqrt(Math.pow(this.getDeltaX(), 2) + Math.pow(this.getDeltaY(), 2));
	};
	
	function Polygon(vectors) {
	  if (vectors.length < 3) throw 'Polygon must have at least 3 verticies';
	  this.verticies = vectors;
	}
	
	function Entity(shape, position) {
	  this.shape = shape;
	  this.position = position;
	}
	Entity.prototype.getVerticies = function () {
	  const position = this.position;
	  return this.shape.verticies.map(function (vertexVector) {
	    return vertexVector.add(position);
	  });
	};
	Entity.prototype.translate = function (vector) {
	  this.position = this.position.add(vector);
	};
	
	module.exports = {
	  Vector: Vector,
	  Line: Line,
	  Polygon: Polygon,
	  Entity: Entity
	};

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,